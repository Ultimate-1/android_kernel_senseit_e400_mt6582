#include <linux/videodev2.h>
#include <linux/i2c.h>
#include <linux/platform_device.h>
#include <linux/delay.h>
#include <linux/cdev.h>
#include <linux/uaccess.h>
#include <linux/fs.h>
#include <asm/atomic.h>
#include <linux/xlog.h>

#include "kd_camera_hw.h"

#include "kd_imgsensor.h"
#include "kd_imgsensor_define.h"
#include "kd_camera_feature.h"

/******************************************************************************
 * Debug configuration
******************************************************************************/
#define PFX "[kd_camera_hw]"
#define PK_DBG_NONE(fmt, arg...)    do {} while (0)
#define PK_DBG_FUNC(fmt, arg...)    xlog_printk(ANDROID_LOG_INFO, PFX , fmt, ##arg)

#define DEBUG_CAMERA_HW_K
#ifdef DEBUG_CAMERA_HW_K
#define PK_DBG PK_DBG_FUNC
#define PK_ERR(fmt, arg...)         xlog_printk(ANDROID_LOG_ERR, PFX , fmt, ##arg)
#define PK_XLOG_INFO(fmt, args...) \
                do {    \
                   xlog_printk(ANDROID_LOG_INFO, PFX , fmt, ##arg); \
                } while(0)
#else
#define PK_DBG(a,...)
#define PK_ERR(a,...)
#define PK_XLOG_INFO(fmt, args...)
#endif

u32 pinSetIdx = 0, pinSetIdxTmp = 1;//default main sensor

#define IDX_PS_CMRST 0
#define IDX_PS_CMPDN 4

#define IDX_PS_MODE 1
#define IDX_PS_ON   2
#define IDX_PS_OFF  3

u32 pinSet[2][8] = {
        //for main sensor
        {GPIO_CAMERA_CMRST_PIN,
            GPIO_CAMERA_CMRST_PIN_M_GPIO,   /* mode */
            GPIO_OUT_ONE,                   /* ON state */
            GPIO_OUT_ZERO,                  /* OFF state */
         GPIO_CAMERA_CMPDN_PIN,
            GPIO_CAMERA_CMPDN_PIN_M_GPIO,
            GPIO_OUT_ONE,
            GPIO_OUT_ZERO,
        },
        //for sub sensor
        {GPIO_CAMERA_CMRST1_PIN,
         GPIO_CAMERA_CMRST1_PIN_M_GPIO,
            GPIO_OUT_ONE,
            GPIO_OUT_ZERO,
         GPIO_CAMERA_CMPDN1_PIN,
            GPIO_CAMERA_CMPDN1_PIN_M_GPIO,
            GPIO_OUT_ONE,
            GPIO_OUT_ZERO,
        },
 	};


int kdCISModulePowerOn(CAMERA_DUAL_CAMERA_SENSOR_ENUM SensorIdx, char *currSensorName, BOOL On, char* mode_name)
{
	if (DUAL_CAMERA_MAIN_SENSOR == SensorIdx){
		if(currSensorName && (0 == strcmp(SENSOR_DRVNAME_GC2235_MIPI_RAW,currSensorName)))
			pinSetIdx = 1;
		else
			pinSetIdx = 0;
    }
    else if (DUAL_CAMERA_SUB_SENSOR == SensorIdx) {
        pinSetIdx = 1;
    }
   
    //power ON
    if (On) {
		
		PK_DBG("kdCISModulePowerOn -on:currSensorName=%s;\n",currSensorName);
		PK_DBG("kdCISModulePowerOn -on:pinSetIdx=%d\n",pinSetIdx);
		
		if(currSensorName && (0 == strcmp(SENSOR_DRVNAME_GC2235_MIPI_RAW,currSensorName)))
        {
            PK_DBG("[kd_gc2235_poweron] start,pinSetIdx:%d\n",pinSetIdx);

			hwPowerOn(CAMERA_POWER_VCAM_D2, VOL_1800, mode_name);
			hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name);
			hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1800,mode_name);

			mdelay(5);// wait power to be stable  
			//disable inactive sensor
			if (GPIO_CAMERA_INVALID != pinSet[1-pinSetIdx][IDX_PS_CMRST]) {
				if(mt_set_gpio_out(pinSet[1-pinSetIdx][IDX_PS_CMRST],pinSet[1-pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF]))
				{
					PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");
				} //low == reset sensor
        
				if(mt_set_gpio_out(pinSet[1-pinSetIdx][IDX_PS_CMPDN],pinSet[1-pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF]))
				{
					PK_DBG("[CAMERA LENS] set gpio failed!! \n");
				} //high == power down lens module
			}    
    
			if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
				if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
				mdelay(1);
				if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");}
				if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");}
				mdelay(10);
				if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");}
				mdelay(5);
			}
		}else if (currSensorName && (0 == strcmp(SENSOR_DRVNAME_S5K4H5YX_MIPI_RAW,currSensorName)))
		{
			PK_DBG("kdCISModulePowerOn get in---  SENSOR_DRVNAME_S5K4H5YX_MIPI_RAW \n");
			//PDN/STBY pin
			if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST])
			{
				PK_DBG("kdCISModulePowerOn get in---  SENSOR_DRVNAME_S5K4H5YX_MIPI_RAW -init set pdn/rst \n");
				
				if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
				if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
				if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
				mdelay(2);
		
				//RST pin
				if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! \n");}
				if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! \n");}
				if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");}
				mdelay(2);
			}
		
		
		
		
		
		
			if(TRUE != hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1200,mode_name))
			{
				 PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
				 //return -EIO;
				 goto _kdCISModulePowerOn_exit_;
			}
			mdelay(2);
				if(TRUE != hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
			{
				PK_DBG("[CAMERA SENSOR] Fail to enable analog power\n");
				//return -EIO;
				goto _kdCISModulePowerOn_exit_;
			}
			mdelay(2);
				if(TRUE != hwPowerOn(CAMERA_POWER_VCAM_D2, VOL_1800,mode_name))
			{
				PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
				//return -EIO;
				goto _kdCISModulePowerOn_exit_;
			}
			mdelay(2);
		
			if(TRUE != hwPowerOn(CAMERA_POWER_VCAM_A2, VOL_2800,mode_name))
			{
				PK_DBG("[CAMERA SENSOR] Fail to enable analog power\n");
				//return -EIO;
				goto _kdCISModulePowerOn_exit_;
			}
			mdelay(2);
		
			//PDN/STBY pin
			if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST])
			{
				if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
				mdelay(5);
		
				//RST pin
				if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");}
				mdelay(5);
			}
			mdelay(50);
			
		pinSetIdxTmp = (pinSetIdx)?0:1;
		//if(pinSetIdx == 0) {//disable sub
		//	   pinSetIdxTmp = 1;
		// }
		// else{
		//     pinSetIdxTmp = 0;
		// }
		if (pinSetIdxTmp==pinSetIdx)
			panic("ЛОГИКА!");
		
		   if (GPIO_CAMERA_INVALID != pinSet[pinSetIdxTmp][IDX_PS_CMRST]) {
			   if(mt_set_gpio_mode(pinSet[pinSetIdxTmp][IDX_PS_CMRST],pinSet[pinSetIdxTmp][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! \n");}
			  if(mt_set_gpio_mode(pinSet[pinSetIdxTmp][IDX_PS_CMPDN],pinSet[pinSetIdxTmp][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
			   if(mt_set_gpio_dir(pinSet[pinSetIdxTmp][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! \n");}
			   if(mt_set_gpio_dir(pinSet[pinSetIdxTmp][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
			   if(mt_set_gpio_out(pinSet[pinSetIdxTmp][IDX_PS_CMRST],pinSet[pinSetIdxTmp][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");} //low == reset sensor
			   if(mt_set_gpio_out(pinSet[pinSetIdxTmp][IDX_PS_CMPDN],pinSet[pinSetIdxTmp][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");} //high == power down lens module
		   }
		
        }else if (currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV5648_MIPI_RAW, currSensorName)))
        {
        #if 1
            mt_set_gpio_out(GPIO_CAMERA_AF_EN_PIN,GPIO_OUT_ZERO);
        #endif
            //Set Power Pin low and Reset Pin Low
            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
            }

            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
            }

            if(TRUE != hwPowerDown(CAMERA_POWER_VCAM_D,mode_name))
            {
                 PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D), power id = %s \n",CAMERA_POWER_VCAM_D);
                 goto _kdCISModulePowerOn_exit_;
            }

            //VCAM_A
            if(TRUE != hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
                PK_DBG("[CAMERA SENSOR] Fail to OFF analog power (VCAM_A), power id= %s \n", CAMERA_POWER_VCAM_A);
                //return -EIO;
                goto _kdCISModulePowerOn_exit_;
            }

            //VCAM_IO
            if(TRUE != hwPowerDown(CAMERA_POWER_VCAM_D2,mode_name)) {
                PK_DBG("[CAMERA SENSOR] Fail to OFF digital power (VCAM_IO), power id = %s \n", CAMERA_POWER_VCAM_D2);
                //return -EIO;
                goto _kdCISModulePowerOn_exit_;
            }

            //AF_VCC
            if(TRUE != hwPowerDown(CAMERA_POWER_VCAM_A2,mode_name))
            {
                PK_DBG("[CAMERA SENSOR] Fail to OFF AF power (VCAM_AF), power id = %s \n", CAMERA_POWER_VCAM_A2);
                //return -EIO;
                goto _kdCISModulePowerOn_exit_;
            }

		}
    }
    else {//power OFF
		PK_DBG("kdCISModulePowerOn -off:currSensorName=%s\n",currSensorName);
		PK_DBG("kdCISModulePowerOn -off:pinSetIdx=%d\n",pinSetIdx);
		
		if(currSensorName && (0 == strcmp(SENSOR_DRVNAME_GC2235_MIPI_RAW,currSensorName)))
		{
			PK_DBG("is gc2235 down\n");
			PK_DBG("[kd_gc2235_powerdown] start,pinSetIdx:%d\n",pinSetIdx);

			if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
				if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");}
			}

			hwPowerDown(CAMERA_POWER_VCAM_D2, mode_name);
			hwPowerDown(CAMERA_POWER_VCAM_A,mode_name);
			hwPowerDown(MT6323_POWER_LDO_VGP3,mode_name);
       
			if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
				if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
			}
		}else{
	        //PK_DBG("[OFF]sensorIdx:%d \n",SensorIdx);
	        if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
	            if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! \n");}
	            if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
	            if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! \n");}
	            if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
	            if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");} //low == reset sensor
	    	    if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");} //high == power down lens module
	        }

	    	if(TRUE != hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
	            PK_DBG("[CAMERA SENSOR] Fail to OFF analog power\n");
	            //return -EIO;
	            goto _kdCISModulePowerOn_exit_;
	        }
			
			if (currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV5647MIPI_RAW, currSensorName)))
			{
				if(TRUE != hwPowerDown(CAMERA_POWER_VCAM_A2,mode_name))
				{
					PK_DBG("[CAMERA SENSOR] Fail to OFF analog power\n");
					//return -EIO;
					goto _kdCISModulePowerOn_exit_;
				}
			}
			
	        if(TRUE != hwPowerDown(CAMERA_POWER_VCAM_D, mode_name)) {
	            PK_DBG("[CAMERA SENSOR] Fail to OFF digital power\n");
	            //return -EIO;
	            goto _kdCISModulePowerOn_exit_;
	        }
	        if(TRUE != hwPowerDown(CAMERA_POWER_VCAM_D2,mode_name))
	        {
	            PK_DBG("[CAMERA SENSOR] Fail to OFF digital power\n");
	            //return -EIO;
	            goto _kdCISModulePowerOn_exit_;
	        }

			//For Power Saving
			if(pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF] != GPIO_OUT_ZERO)
			{
				mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN], GPIO_OUT_ZERO);
			}
			if(pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF] != GPIO_OUT_ZERO)
			{
				mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST], GPIO_OUT_ZERO);
			}

			if(pinSet[1-pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF] != GPIO_OUT_ZERO)
			{
				   mt_set_gpio_out(pinSet[1-pinSetIdx][IDX_PS_CMPDN], GPIO_OUT_ZERO);
			}
			if(pinSet[1-pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF] != GPIO_OUT_ZERO)
			{
				   mt_set_gpio_out(pinSet[1-pinSetIdx][IDX_PS_CMRST], GPIO_OUT_ZERO);
			}
	   }
		//~For Power Saving
    }//

	return 0;

_kdCISModulePowerOn_exit_:
    return -EIO;
}

EXPORT_SYMBOL(kdCISModulePowerOn);


//!--
//




/*
void kdCISModulePowerOn_()
{
  int v0; // r1@1
  int v1; // r6@1
  int v2; // r3@1
  int v3; // r4@1
  int v4; // r8@1
  int v5; // r2@1
  int v6; // r7@2
  unsigned int v7; // r9@2
  unsigned int v8; // r5@5
  int v9; // r5@15
  unsigned int *v10; // r3@15
  int v11; // r7@15
  unsigned int v12; // r9@17
  unsigned int v13; // r10@23
  signed int v14; // r4@38
  signed int v15; // r4@42
  signed int v16; // r4@46
  signed int v17; // r4@50
  int v18; // r5@59
  unsigned int *v19; // r3@59
  int v20; // r6@59
  unsigned int v21; // r7@62
  signed int v22; // r8@88
  signed int v23; // r8@95
  signed int v24; // r8@101
  int v25; // [sp+8h] [bp-70h]@1
  unsigned int GPIO_CAMERA_CMRST_PIN; // [sp+Ch] [bp-6Ch]@1
  int v27; // [sp+10h] [bp-68h]@1
  signed int v28; // [sp+14h] [bp-64h]@1
  int v29; // [sp+18h] [bp-60h]@1
  unsigned int GPIO_CAMERA_CMPDN_PIN; // [sp+1Ch] [bp-5Ch]@1
  int v31; // [sp+20h] [bp-58h]@1
  signed int v32; // [sp+24h] [bp-54h]@1
  int v33; // [sp+28h] [bp-50h]@1
  unsigned int GPIO_CAMERA_CMRST1_PIN; // [sp+2Ch] [bp-4Ch]@1
  int v35; // [sp+30h] [bp-48h]@1
  signed int v36; // [sp+34h] [bp-44h]@1
  int v37; // [sp+38h] [bp-40h]@1
  unsigned int GPIO_CAMERA_CMPDN1_PIN; // [sp+3Ch] [bp-3Ch]@1
  int v39; // [sp+40h] [bp-38h]@1
  int v40; // [sp+44h] [bp-34h]@1
  signed int v41; // [sp+48h] [bp-30h]@1
  unsigned int pinSet[2][8]; // [sp+4Ch] [bp-2Ch]@2
  int pinSet_40; // [sp+74h] [bp-4h]@52

  v25 = _gnu_mcount_nc_();
  v1 = v0;
  v3 = v2;
  GPIO_CAMERA_CMRST_PIN = 0x80000009;
  v27 = 0;
  v28 = 1;
  v29 = 0;
  v4 = v25 - 2 + ((unsigned int)(v25 - 2) <= 0) - (v25 - 2);
  GPIO_CAMERA_CMPDN_PIN = 0x80000002;
  v31 = 0;
  v32 = 1;
  v33 = 0;
  GPIO_CAMERA_CMRST1_PIN = 0x80000009;
  v35 = 0;
  v36 = 1;
  v37 = 0;
  GPIO_CAMERA_CMPDN1_PIN = 0x80000008;
  v39 = 0;
  v40 = 0;
  v41 = 1;
  if ( !v5 )
  {
    if ( mt_set_gpio_mode_(0x8000000B, 0) )
      printk_(0xC0974A34, -1065218132);
    if ( mt_set_gpio_dir_(0x8000000B, 1) )
      printk_(0xC0974A70, "kdCISModulePowerOn");
    if ( mt_set_gpio_out_(0x8000000B, 0) )
      printk_(0xC0974AAC, "kdCISModulePowerOn");
    v18 = v4;
    v19 = pinSet[v4];
    v20 = *(v19 - 16);
    if ( v20 != 255 )
    {
      if ( mt_set_gpio_mode_(*(v19 - 16), *(v19 - 15)) )
        printk_(-1063827072, "kdCISModulePowerOn");
      v21 = pinSet[v18 - 1][-4];
      if ( mt_set_gpio_mode_(pinSet[v18 - 1][-4], pinSet[v18 - 1][-3]) )
        printk_(-1063826892, "kdCISModulePowerOn");
      if ( mt_set_gpio_dir_(v20, 1) )
        printk_(-1063827008, "kdCISModulePowerOn");
      if ( mt_set_gpio_dir_(v21, 1) )
        printk_(-1063827008, "kdCISModulePowerOn");
      if ( mt_set_gpio_out_(v20, pinSet[v18 - 1][-5]) )
        printk_(0xC09749FC, "kdCISModulePowerOn");
      if ( mt_set_gpio_out_(v21, pinSet[v18 - 1][-1]) )
        printk_(-1063826948, "kdCISModulePowerOn");
    }
    if ( !hwPowerDown_(21, v3) )
    {
      printk_(0xC0974C48, "kdCISModulePowerOn");
      goto LABEL_52;
    }
    if ( !hwPowerDown_(12, v3) )
      goto LABEL_91;
    if ( !hwPowerDown_(17, v3) )
    {
      printk_(0xC0974C88, "kdCISModulePowerOn");
      goto LABEL_52;
    }
    if ( hwPowerDown_(18, v3) )
      goto LABEL_52;
    goto LABEL_76;
  }
  v6 = 1 - v4;
  v7 = pinSet[v6 - 2][0];
  if ( v7 != 255 )
  {
    if ( mt_set_gpio_mode_(pinSet[v6 - 2][0], pinSet[v6 - 1][-7]) )
      printk_(0xC0974980, -1065218132);
    v8 = pinSet[v6 - 1][-4];
    if ( mt_set_gpio_mode_(pinSet[v6 - 1][-4], pinSet[v6 - 1][-3]) )
      printk_(-1063827072, "kdCISModulePowerOn");
    if ( mt_set_gpio_dir_(v7, 1) )
      printk_(-1063827008, "kdCISModulePowerOn");
    if ( mt_set_gpio_dir_(v8, 1) )
      printk_(-1063827008, "kdCISModulePowerOn");
    if ( mt_set_gpio_out_(v7, pinSet[v6 - 1][-5]) )
      printk_(-1063826948, "kdCISModulePowerOn");
    if ( mt_set_gpio_out_(v8, pinSet[v6 - 1][-1]) )
      printk_(-1063826948, "kdCISModulePowerOn");
  }
  v9 = v4;
  v10 = pinSet[v4];
  v11 = *(v10 - 16);
  if ( mt_set_gpio_mode_(*(v10 - 16), *(v10 - 15)) )
    printk_(-1063827072, "kdCISModulePowerOn");
  v12 = pinSet[v9 - 1][-4];
  if ( mt_set_gpio_mode_(pinSet[v9 - 1][-4], pinSet[v9 - 1][-3]) )
    printk_(-1063827072, "kdCISModulePowerOn");
  if ( mt_set_gpio_dir_(v11, 1) )
    printk_(-1063827008, "kdCISModulePowerOn");
  if ( mt_set_gpio_dir_(v12, 1) )
    printk_(-1063827008, "kdCISModulePowerOn");
  v13 = pinSet[v9 - 1][-5];
  if ( mt_set_gpio_out_(v11, pinSet[v9 - 1][-5]) )
    printk_(-1063826948, "kdCISModulePowerOn");
  if ( mt_set_gpio_out_(v12, pinSet[v9 - 1][-1]) )
    printk_(-1063826948, "kdCISModulePowerOn");
  if ( !v4 )
  {
    if ( mt_set_gpio_mode_(0x8000000B, 0) )
      printk_(0xC0974A34, "kdCISModulePowerOn");
    if ( mt_set_gpio_dir_(0x8000000B, 1) )
      printk_(0xC0974A70, "kdCISModulePowerOn");
    if ( mt_set_gpio_out_(0x8000000B, 1) )
      printk_(0xC0974AAC, "kdCISModulePowerOn");
  }
  if ( !v1 )
    goto LABEL_34;
  if ( !strcmp_(0xC0974AE4, v1) )
  {
    printk_(-1063826700, v4);
    if ( !hwPowerOn_(18, 1800, v3) )
      goto LABEL_76;
    _loop_const_udelay_(107374000);
    if ( !hwPowerOn_(21, 2800, v3) )
      goto LABEL_91;
    _loop_const_udelay_(107374000);
    if ( !hwPowerOn_(17, 1500, v3) )
      goto LABEL_76;
    v22 = 5;
    do
    {
      _loop_const_udelay_(107374000);
      --v22;
    }
    while ( v22 );
  }
  else
  {
    if ( !strcmp_(0xC0974BAC, v1) || !strcmp_(0xC0974BE4, v1) )
    {
      printk_(0xC0974BB8, v25);
      goto LABEL_34;
    }
    if ( !strcmp_(0xC0974BF0, v1) )
    {
      printk_(-1063826436, v4);
      if ( !hwPowerOn_(18, 1800, v3) )
        goto LABEL_76;
      _loop_const_udelay_(107374000);
      if ( !hwPowerOn_(21, 2800, v3) )
        goto LABEL_91;
      _loop_const_udelay_(107374000);
      if ( !hwPowerOn_(17, 1500, v3) )
        goto LABEL_76;
      v24 = 5;
      do
      {
        _loop_const_udelay_(107374000);
        --v24;
      }
      while ( v24 );
    }
    else
    {
      if ( strcmp_(0xC0974C38, v1) )
      {
LABEL_34:
        if ( hwPowerOn_(18, 1800, v3) && hwPowerOn_(17, 1800, v3) )
        {
          if ( hwPowerOn_(21, 2800, v3) && hwPowerOn_(12, 2800, v3) )
            goto LABEL_38;
          goto LABEL_91;
        }
LABEL_76:
        printk_(-1063826652, "kdCISModulePowerOn");
        goto LABEL_52;
      }
      printk_(-1063826700, v4);
      if ( !hwPowerOn_(18, 1800, v3) )
        goto LABEL_76;
      _loop_const_udelay_(107374000);
      if ( !hwPowerOn_(21, 2800, v3) )
        goto LABEL_91;
      _loop_const_udelay_(107374000);
      if ( !hwPowerOn_(17, 1500, v3) )
        goto LABEL_76;
      v23 = 5;
      do
      {
        _loop_const_udelay_(107374000);
        --v23;
      }
      while ( v23 );
    }
  }
  if ( hwPowerOn_(12, 2800, v3) )
  {
LABEL_38:
    v14 = 15;
    do
    {
      _loop_const_udelay_(107374000);
      --v14;
    }
    while ( v14 );
    if ( mt_set_gpio_out_(v12, pinSet[v9 - 1][-2]) )
      printk_(-1063826772, "kdCISModulePowerOn");
    v15 = 100;
    do
    {
      _loop_const_udelay_(107374000);
      --v15;
    }
    while ( v15 );
    if ( mt_set_gpio_out_(v11, v13) )
      printk_(-1063826948, "kdCISModulePowerOn");
    v16 = 100;
    do
    {
      _loop_const_udelay_(107374000);
      --v16;
    }
    while ( v16 );
    if ( mt_set_gpio_out_(v11, pinSet[v9 - 1][-6]) )
      printk_(-1063826948, "kdCISModulePowerOn");
    v17 = 100;
    do
    {
      _loop_const_udelay_(107374000);
      --v17;
    }
    while ( v17 );
LABEL_52:
    JUMPOUT(__CS__, pinSet_40);
  }
LABEL_91:
  printk_(-1063826584, "kdCISModulePowerOn");
  goto LABEL_52;
}
*/
